?quantile
data("mtcars")
# média
mean(mtcars$mpg)
# mediana
median(mtcars$mpg)
# quantis
quantile(x = mtcars$mpg)
quantile(x = mtcars$mpg, probs = c(0,1,0.1))
quantile(x = mtcars$mpg, probs = c(0,1,0.01))
quantile(x = mtcars$mpg, probs = seq(0,1,0.1))
quantile(x = mtcars$mpg, probs = seq(0,1,0.01))
# gerando valores aleatórios de uma Poisson
x <- rpois(n = 1000, lambda = 7)
?dpois
plot(x, ppois(x, 1), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
plot(x, ppois(x, 1), type = "l", ylab = "F(x)", main = "Poisson(1) CDF")
plot(x, ppois(x, 7), type = "l", ylab = "F(x)", main = "Poisson(1) CDF")
plot(x)
# gerando valores da densidade da Poisson
y <- dpois(x = x, lambda = 7)
plot(x,y)
plot(x, y, type = "b")
plot(x, y, type = "l")
x <- rbinom(n = 1000, size = 450, prob = 1/7)
# gerando valores da densidade de uma Binomial
y <- dbinom(x = x, size = 450, prob = 1/7)
plot(x, y, main = "Binomial")
# gerando valores aleatórios de uma Poisson
x <- rnorm(n = 1000)
# gerando valores aleatórios de uma Poisson
x <- rnorm(n = 1000)
# gerando valores da densidade da Poisson
y <- dnorm(x = x)
plot(x, y, main = "Normal")
plot(x, y, main = "Normal", type = "l")
# Define the density domain
x <- seq(from=0,to=6,length.out=100)
ylim<-c(0,0.6)
#Plot a uniform density
plot(x,dunif(x,min=2,max=4),main="Uniform",type="l",ylim=ylim)
#Plot a Normal density
plot(x,dnorm(x,mean=3,sd=1),main="Normal",type="l",ylim=ylim)
#Plot an Exponential density
plot(x,dexp(x,rate=1/2),main="Exponential",type="l",ylim=ylim)
#Plot a Gamma density
plot(x,dgamma(x,shape=2,rate=1),main="Gamma",type="l",ylim=ylim)
x <- seq(from=0,to=6,length.out=100)
ylim<-c(0,0.6)
plot(x, dpois(x = x, lambda = mean(x)), main = "Poisson", ylim = ylim)
# gerando valores da densidade da Poisson
y <- dpois(x = x, lambda = mean(x))
plot(x, dpois(x = x, lambda = mean(x)), main = "Poisson", ylim = ylim)
# gerando valores aleatórios de uma Poisson
x <- rpois(n = 1000, lambda = 7)
# gerando valores da densidade da Poisson
y <- dpois(x = x, lambda = mean(x))
plot(x, y, main = "Poisson")
curve(density(x))
plot(x, y, main = "Poisson")
curve(density(x))
plot(x, y, main = "Poisson")
lines(density(x))
lines(dpois(x, lambda = 7), col = "red")
lines(x, dpois(x, lambda = 7), col = "red")
curve(x, dpois(x, lambda = 7), col = "red")
plot(x, y, main = "Poisson")
lines(density(x))
lines(x, dpois(x, lambda = 7), col = "red")
# Definindo um novo domínio para a densidade
x <- seq(from=0,to=6,length.out=100)
ylim<-c(0,0.6)
# Plot da densidade da Normal para um x qualquer
plot(x,dnorm(x,mean=3,sd=1), main="Normal", type="l", ylim=ylim)
lines(x, dnorm(x,mean=5,sd=1), col = "red")
lines(x, dnorm(x,mean=2,sd=1), col = "blue")
lines(x, dnorm(x,mean=2,sd=0.2), col = "blue")
lines(x, dnorm(x,mean=2,sd=0.5), col = "blue")
lines(x, dnorm(x,mean=2,sd=0.6), col = "blue")
lines(x, dnorm(x,mean=2,sd=0.8), col = "blue")
lines(x, dnorm(x,mean=2,sd=1.5), col = "blue")
lines(x, dnorm(x,mean=2,sd=0.9), col = "blue")
# gerando valores aleatórios de uma Poisson
x <- runif(n = 1000)
# gerando valores da densidade da Poisson
y <- dunif(x,min=2,max=4)
# Plot da densidade da Normal para um x de valores normais
plot(x, y, main = "Uniform")
# Definindo um novo domínio para a densidade
x <- seq(from=0,to=6,length.out=100)
ylim<-c(0,0.6)
# Plot da densidade da Uniform para um x qualquer
plot(x, y = dunif(x,min=2,max=4), main="Uniforme", type="l", ylim=ylim)
lines(x, dunif(xmin=0,max=6), col = "red")
lines(x, dunif(x,min=0,max=6), col = "red")
lines(x, dunif(x,min=1,max=3), col = "blue")
?runif
# gerando valores aleatórios de uma Poisson
x <- runif(n = 1000, min=2,max=4)
# gerando valores da densidade da Poisson
y <- dunif(x,min=2,max=4)
# Plot da densidade da Normal para um x de valores normais
plot(x, y, main = "Uniform")
# gerando valores aleatórios de uma Exponencial
x <- rexp(n = 1000, rate = 1/2)
# gerando valores da densidade da Exponencial
y <- dexp(x,rate=1/2)
# Plot da densidade da Exponencial para um x de valores exp
plot(x, y, main = "Exponencial")
# Plot da densidade da Exponencial para um x de valores exp
plot(x, y, main = "Exponencial", type = "l")
# Definindo um novo domínio para a densidade
x <- seq(from=0,to=6,length.out=100)
ylim<-c(0,0.6)
# Plot da densidade da Exponencial para um x qualquer
plot(x, y = dexp(x,rate=1/2),main="Exponential",type="l",ylim=ylim)
lines(x, dexp(x,rate=1/10), col = "red")
lines(x, dexp(x,rate=2), col = "blue")
lines(x, dexp(x,rate=1/6), col = "red")
lines(x, dexp(x,rate=1/4), col = "red")
# gerando valores aleatórios de uma Gamma
x <- rgamma(n = 1000, shape = 2)
# gerando valores da densidade da Gamma
y <- dgamma(x,shape=2,rate=1)
# Plot da densidade da Gamma para um x de valores gamma
plot(x, y, main = "Gamma")
# Definindo um novo domínio para a densidade
x <- seq(from=0,to=6,length.out=100)
ylim<-c(0,0.6)
# Plot da densidade da Gamma para um x qualquer
plot(x,y = dgamma(x,shape=2,rate=1),main="Gamma",type="l",ylim=ylim)
lines(x, dgamma(x,shape=4,rate=1), col = "red")
lines(x, dgamma(x,shape=1,rate=2), col = "blue")
rm(list = ls())
# gerando valores aleatórios de uma Poisson
x <- rpois(n = 1000, lambda = 7)
# gerando valores da densidade da Poisson
y <- dpois(x = x, lambda = mean(x))
plot(x, y, main = "Poisson")
x <- rbinom(n = 1000, size = 450, prob = 1/7)
# gerando valores da densidade de uma Binomial
y <- dbinom(x = x, size = 450, prob = 1/7)
plot(x, y, main = "Binomial")
# gerando valores aleatórios de uma Poisson
x <- rnorm(n = 1000)
# gerando valores da densidade da Poisson
y <- dnorm(x = x)
# Plot da densidade da Normal para um x de valores normais
plot(x, y, main = "Normal")
# Definindo um novo domínio para a densidade
x <- seq(from=0,to=6,length.out=100)
ylim<-c(0,0.6)
# Plot da densidade da Normal para um x qualquer
plot(x,dnorm(x,mean=3,sd=1), main="Normal", type="l", ylim=ylim)
lines(x, dnorm(x,mean=5,sd=1), col = "red")
lines(x, dnorm(x,mean=2,sd=0.8), col = "blue")
# Definindo um novo domínio para a densidade
x <- seq(from=0,to=6,length.out=100)
ylim<-c(0,0.6)
# Plot da densidade da Uniform para um x qualquer
plot(x, y = dunif(x,min=2,max=4), main="Uniforme", type="l", ylim=ylim)
lines(x, dunif(x,min=1,max=3), col = "blue")
# gerando valores aleatórios de uma Exponencial
x <- rexp(n = 1000, rate = 1/2)
# gerando valores da densidade da Exponencial
y <- dexp(x,rate=1/2)
# Plot da densidade da Exponencial para um x de valores exp
plot(x, y, main = "Exponencial")
# Definindo um novo domínio para a densidade
x <- seq(from=0,to=6,length.out=100)
ylim<-c(0,0.6)
# Plot da densidade da Exponencial para um x qualquer
plot(x, y = dexp(x,rate=1/2),main="Exponential",type="l",ylim=ylim)
lines(x, dexp(x,rate=1/4), col = "red")
lines(x, dexp(x,rate=2), col = "blue")
# gerando valores aleatórios de uma Gamma
x <- rgamma(n = 1000, shape = 2)
# gerando valores da densidade da Gamma
y <- dgamma(x,shape=2,rate=1)
# Plot da densidade da Gamma para um x de valores gamma
plot(x, y, main = "Gamma")
# Definindo um novo domínio para a densidade
x <- seq(from=0,to=6,length.out=100)
ylim<-c(0,0.6)
# Plot da densidade da Gamma para um x qualquer
plot(x,y = dgamma(x,shape=2,rate=1),main="Gamma",type="l",ylim=ylim)
lines(x, dgamma(x,shape=4,rate=1), col = "red")
lines(x, dgamma(x,shape=1,rate=2), col = "blue")
# lendo dados do tipo csv na pasta do projeto
mtcars <- read.csv(file = "mtcars.csv")
# lendo dados do tipo excel -- precisa de pacote
library(readxl)
insetos <- read_xlsx(path = "C:/Users/Heloiza/Downloads/InsectSprays.xlsx", sheet = 1)
sprays <- read_xlsx(path = "OrchardSprays.xlsx")
# lendo dados do tipo txt
insetos <- read.table("C:/Users/Heloiza/Downloads/InsectSprays.txt", header = TRUE)
sprays <- read.table("C:/Users/Heloiza/Downloads/OrchardSprays.txt", header = TRUE)
# lendo dados do R ou de pacotes do R
data("diamonds") # conjunto de dados do pacote ggplot2
?sd
?var
View(mtcars)
sd(mtcars$cyl)
View(insetos)
View(mtcars)
View(insetos)
?mtcard
?mtcars
?plto
?plot
plot(insetos$spray)
plot(table(insetos$spray))
plot(table(insetos$spray), type = "p")
View(sprays)
plot(table(sprays$treatment))
plot(table(sprays$treatment), type = "p")
?barplot
View(sprays)
names(sprays)
barplot(decrease ~ treatment, data = sprays)
View(insetos)
force(longley)
force(data(longley))
barplot(Employed ~ Year, data = longley)
?boxplot
# gráfico de linhas
plot(Employed ~ Year, data = longley, type = "l")
# identifica o diretório
getwd()
# muda de diretório
setwd("C:/Users/Heloiza/Desktop/Consultoria")
# muda de diretório
setwd("C:\Users\Heloiza\Dowload")
# muda de diretório
setwd("C:/Users/Heloiza/Downloads")
setwd("C:/Users/Heloiza/Desktop/Consultorias/My-R-Course")
# identifica o diretório
getwd()
sprays <- read.table("OrchardSprays.txt")
View(sprays)
barplot(Employed ~ Year, data = longley)
# gráfico de linhas
plot(Employed ~ Year, data = longley, type = "l")
ggplot(data = insetos, mapping = aes(x = spray, y = count)) +
geom_violin()
library(ggplot2)
# lendo dados do tipo txt
insetos <- read.table("C:/Users/Heloiza/Downloads/InsectSprays.txt", header = TRUE)
ggplot(data = insetos, mapping = aes(x = spray, y = count)) +
geom_violin()
ggplot(data = insetos, mapping = aes(x = spray, y = count)) +
geom_boxplot()
# gráfico de linhas
ggplot(data = longley, mapping = aes(x = Year, y = Employed)) +
geom_line()
data("longley")
barplot(Employed ~ Year, data = longley)
View(longley)
# gráfico de linhas
ggplot(data = longley, mapping = aes(x = Year, y = Employed)) +
geom_line(mapping = aes(fill = GNP))
# gráfico de linhas
ggplot(data = longley, mapping = aes(x = Year, y = Employed, fill = GNP)) +
geom_line(mapping = aes(fill = GNP))
# gráfico de linhas
ggplot(data = longley, mapping = aes(x = Year, y = Employed, color = GNP)) +
geom_line(mapping = aes(fill = GNP))
# gráfico de linhas
ggplot(data = longley, mapping = aes(x = Year, y = Employed)) +
geom_line()
?geom_line
data("economics")
force(economics)
View(economics)
data("economics_long")
force(economics_long)
View(economics_long)
names(longley)
ggplot(data = longley, mapping = aes(x = Year, y = Employed)) +
geom_line(aes(y = Unemployed, color = "red"))
ggplot(data = longley, mapping = aes(x = Year)) +
geom_line(aes(y = Employed, color = "blue")) +
geom_line(aes(y = Unemployed, color = "red"))
# gráfico de linhas
ggplot(data = longley, mapping = aes(x = Year, y = Employed)) +
geom_line()
ggplot(data = longley, mapping = aes(x = Year)) +
geom_line(aes(y = Unemployed, color = "red"))
ggplot(data = longley, mapping = aes(x = Year, y = Population)) +
geom_line() +
geom_line(aes(y = Unemployed, color = "red"))
ggplot(data = longley, mapping = aes(x = Year)) +
geom_line(aes(y = Population, color = "black")) +
geom_line(aes(y = Unemployed, color = "red"))
ggplot(data = longley, mapping = aes(x = Year)) +
geom_line(aes(y = GNP, color = "black")) +
geom_line(aes(y = Unemployed, color = "red"))
?geom_point
library(ggplot2)
?theme_classic
# boxplot
ggplot(data = diamonds, mapping = aes(x = color, y = carat)) +
geom_boxplot() +
facet_grid(color)
?facet_grid
# boxplot
ggplot(data = diamonds, mapping = aes(x = color, y = carat)) +
geom_boxplot() +
facet_grid(rows = color)
# histograma
ggplot(data = diamonds, mapping = aes(price, cut)) +
geom_histogram() +
theme_linedraw()
ggplot(data = insetos, mapping = aes(x = spray, y = count)) +
geom_point()
# lendo dados do tipo txt
insetos <- read.table("C:/Users/Heloiza/Downloads/InsectSprays.txt", header = TRUE)
ggplot(data = insetos, mapping = aes(x = spray, y = count)) +
geom_point()
dados <- data.frame(renda=c(10,15,12,70,80,100,20,30,10,60),
nfilhos=c(8,6,5,1,2,2,3,2,6,1),
estudo=c(3,5,5,12,16,18,8,8,4,8))
t(dados)
t(t(dados))
diamonds
diamonds$cutf <- as.factor(as.character(diamonds$cut))
# carregando esse pacote para fazer transformações nos dados, fazer gráficos e
# usar o conjunto de dados diamonds do pacote ggplot2
library(tidyverse)
data("diamonds")
diamonds$cutf <- as.factor(as.character(diamonds$cut))
diamonds$clarityf <- as.factor(as.character(diamonds$clarity))
?as.factor
diamonds$color
insetos <- read.table("InsectSprays.txt")
View(insetos)
table(insetos$spray)
?case_when
insetos <- insetos |>
mutate(spray2 = case_when(
spray == "A" ~ 1,
spray == "B" ~ 2,
spray == "C" ~ 3,
spray == "D" ~ 4,
spray == "E" ~ 5,
spray == "F" ~ 6,
))
View(insetos)
View(diamonds)
as.numeric(diamonds$color)
diamonds$cutf <- as.factor(as.character(diamonds$cut))
diamonds$clarityf <- as.factor(as.character(diamonds$clarity))
# Modelo de Regressão Múltipla
mod1 <- lm(formula = price ~ carat + cutf + depth + clarityf, data = diamonds)
summary(mod1)
model.matrix(mod1)
# Teste Komogorov-Smirnof
?ks.test
# Teste Shapiro-Wilk de Normalidade
?shapiro.test
library(stats, help = TRUE)
?library
library(help = stats)
data("mtcars")
?mtcars
?bartlett.test
?chisq.test
x <- c(A = 20, B = 15, C = 25)
chisq.test(x)
x
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) <- list(gender = c("F", "M"),
party = c("Democrat","Independent", "Republican"))
(Xsq <- chisq.test(M))
chisq.test(M)
M
# Exemplo 2
c_hum <- c(15,20,30,20,15)
c_bio <- c(8,23,18,34,17)
D <- as.table(rbind(c_hum,c_bio))
chisq.test(D)
D
?ks.test
x<-seq(-3,3,0.1)
par(mfrow=c(1,2))
curve(dnorm(x = x, mean = 0, sd=1), xlim=c(-3,3), col="blue",lwd=2, main="f.d.p. da Distrib. Normal padrão",xlab="z")
curve(pnorm(q = x, mean = 0, sd=1), xlim=c(-3,3), col="blue",lwd=2, main="f.d.a. da Distrib. Normal padrão",xlab="z")
lines(x=c(0,0), y=c(0,fdanorm[x==0]), lty=2, col="gray")
lines(x=c(0,0), y=c(0,pnorm(0)), lty=2, col="gray")
curve(dnorm(x = x, mean = 0, sd=1), xlim=c(-3,3), col="blue",lwd=2, main="f.d.p. da Distrib. Normal padrão",xlab="z")
lines(x=c(0,0), y=c(0,dnorm(0)), lty=2, col="gray")
curve(pnorm(q = x, mean = 0, sd=1), xlim=c(-3,3), col="blue",lwd=2, main="f.d.a. da Distrib. Normal padrão",xlab="z")
lines(x=c(0,0), y=c(0,pnorm(0)), lty=2, col="gray")
curve(dnorm(x = x, mean = 0, sd=1), xlim=c(-3,3), col="blue",lwd=2, main="f.d.p. da Distrib. Normal padrão",xlab="z")
lines(x=c(0,0), y=c(0,dnorm(0)), lty=6, col="gray")
curve(pnorm(q = x, mean = 0, sd=1), xlim=c(-3,3), col="blue",lwd=2, main="f.d.a. da Distrib. Normal padrão",xlab="z")
lines(x=c(0,0), y=c(0,pnorm(0)), lty=6, col="gray")
?rnorm
qnorm(0.975)
qnorm(p = 0.05)
# Definindo um novo domínio para a densidade
x <- seq(from=0,to=6,length.out=100)
ylim<-c(0,0.6)
# Plot da densidade da Normal para um x qualquer
plot(x,dnorm(x,mean=3,sd=1), main="Normal", type="l", ylim=ylim)
lines(x, dnorm(x,mean=5,sd=1), col = "red")
lines(x, dnorm(x,mean=2,sd=0.8), col = "blue")
x<-seq(-3,3,0.1)
par(mfrow=c(1,2))
curve(dnorm(x = x, mean = 0, sd=1), xlim=c(-3,3), col="black",lwd=2, main="f.d.p. da Distrib. Normal padrão")
lines(x=c(0,0), y=c(0,dnorm(0)), lty=6, col="gray")
lines(x, dnorm(x,mean=5,sd=1), col = "red")
lines(x, dnorm(x,mean=2,sd=0.8), col = "blue")
curve(pnorm(q = x, mean = 0, sd=1), xlim=c(-3,3), col="black",lwd=2, main="f.d.a. da Distrib. Normal padrão")
lines(x=c(0,0), y=c(0,pnorm(0)), lty=6, col="gray")
lines(x, pnorm(x,mean=5,sd=1), col = "red")
lines(x, pnorm(x,mean=2,sd=0.8), col = "blue")
curve(dnorm(x = x, mean = 0, sd=1), xlim=c(-3,3), col="black",lwd=2, main="f.d.p. da Distrib. Normal padrão")
lines(x=c(0,0), y=c(0,dnorm(0)), lty=6, col="gray")
lines(x, dnorm(x,mean=-2,sd=1), col = "red")
lines(x, dnorm(x,mean=1,sd=0.8), col = "blue")
curve(pnorm(q = x, mean = 0, sd=1), xlim=c(-3,3), col="black",lwd=2, main="f.d.a. da Distrib. Normal padrão")
lines(x=c(0,0), y=c(0,pnorm(0)), lty=6, col="gray")
lines(x, pnorm(x,mean=-2,sd=1), col = "red")
lines(x, pnorm(x,mean=1,sd=0.8), col = "blue")
curve(dnorm(x = x, mean = 0, sd=1), xlim=c(-3,3), ylim=c(0,1) col="black",lwd=2, main="f.d.p. da Distrib. Normal padrão")
curve(dnorm(x = x, mean = 0, sd=1), xlim=c(-3,3), ylim=c(0,1), col="black",lwd=2, main="f.d.p. da Distrib. Normal padrão")
lines(x=c(0,0), y=c(0,dnorm(0)), lty=6, col="gray")
lines(x, dnorm(x,mean=-2,sd=1), col = "red")
lines(x, dnorm(x,mean=1,sd=0.8), col = "blue")
curve(dnorm(x = x, mean = 0, sd=1), xlim=c(-3,3), ylim=c(0,0.6), col="black",lwd=2, main="f.d.p. da Distrib. Normal padrão")
lines(x=c(0,0), y=c(0,dnorm(0)), lty=6, col="gray")
lines(x, dnorm(x,mean=-2,sd=1), col = "red")
lines(x, dnorm(x,mean=1,sd=0.8), col = "blue")
curve(pnorm(q = x, mean = 0, sd=1), xlim=c(-3,3), col="black",lwd=2, main="f.d.a. da Distrib. Normal padrão")
lines(x=c(0,0), y=c(0,pnorm(0)), lty=6, col="gray")
lines(x, pnorm(x,mean=-2,sd=1), col = "red")
lines(x, pnorm(x,mean=1,sd=0.8), col = "blue")
?rexp
# gerando valores do quantile da distribuição
qexp(p = c(0.05,0.025,0.95,0.975))
x <- seq(0,5,0.01)
par(mfrow=c(1,2))
curve(dexp(x,1),xlim=c(0,5),main="f.d.p para X~exponencial(1)",xlab="(a)")
curve(pexp(x,1),xlim=c(0,5),main="f.d.a para X~exponencial(1)",xlab="(b)")
curve(dexp(x,rate=1),xlim=c(0,5),main="f.d.p para X~exponencial(1)",xlab="(a)")
lines(x, dexp(x,rate=1/4), col = "red")
lines(x, dexp(x,rate=2), col = "blue")
curve(pexp(x,1),xlim=c(0,5),main="f.d.a para X~exponencial(1)",xlab="(b)")
lines(x, dexp(x,rate=1/2), col = "red")
lines(x, dexp(x,rate=2), col = "blue")
curve(dexp(x,rate=1),xlim=c(0,5),main="f.d.p para X~exponencial(1)",xlab="(a)")
lines(x, dexp(x,rate=1/2), col = "red")
lines(x, dexp(x,rate=2), col = "blue")
curve(pexp(x,1),xlim=c(0,5),main="f.d.a para X~exponencial(1)",xlab="(b)")
lines(x, pexp(x,rate = 1/2), col = "red")
lines(x, pexp(x,rate=2), col = "blue")
qgamma(p = c(0.05,0.01,0.99,0.95))
qgamma(p = c(0.05,0.01,0.99,0.95), shape = 1)
?qgamma
x <- seq(0,10,0.01)
curve(dgamma(x,shape = 3, scale = 1),xlim=c(0,10))
lines(x, dgamma(x,shape=4,rate=1), col = "red")
lines(x, dgamma(x,shape=1,rate=2), col = "blue")
curve(pgamma(x,shape = 3, scale = 1),xlim=c(0,10))
lines(x, pgamma(x,shape=4,rate=1), col = "red")
lines(x, pgamma(x,shape=1,rate=2), col = "blue")
?dchisq
# gerando valores do quantile da distribuição
qchisq(p = c(0.05,0.01,0.99,0.95), df = 2)
qchisq(p = c(0.05,0.01,0.99,0.95), df = 10)
par(mfrow=c(1,3))
curve(dchisq(x,df=1),xlim=c(0,10),xlab="(a) df=1")
curve(dchisq(x,df=2),xlim=c(0,10),xlab="(b) df=2")
curve(dchisq(x,df=3),xlim=c(0,10),xlab="(c) df=3")
curve(dchisq(x,df=1),xlim=c(0,10),xlab="(a) df=1")
lines(x, dchisq(x,df=2))
curve(dchisq(x,df=1),xlim=c(0,10),xlab="(a) df=1")
lines(x, dchisq(x,df=2), col="red")
curve(dchisq(x,df=2),xlim=c(0,10),xlab="(b) df=2")
lines(x, dchisq(x,df=3),col="blue")
curve(dchisq(x,df=3),xlim=c(0,10),xlab="(c) df=3")
par(mfrow=c(1,2))
curve(dchisq(x,df=1),xlim=c(0,10),xlab="(a) df=1")
lines(x, dchisq(x,df=2), col="red")
lines(x, dchisq(x,df=3),col="blue")
curve(pchisq(x, df=1))
lines(x, pchisq(x,df=2),col="red")
lines(x,pchisq(x,df=3),col="blue")
curve(dchisq(x,df=1),xlim=c(0,10),xlab="(a) df=1")
lines(x, dchisq(x,df=0.5), col="red")
lines(x, dchisq(x,df=1.5), col="red")
lines(x, dchisq(x,df=3),col="blue")
