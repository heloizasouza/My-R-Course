sd(mtcars$mpg)
# variância
sd(mtcars$mpg)^2
# mediana
median(mtcars$mpg)
View(mtcars)
# tabela de frequências
table(mtcars$cyl)
# tabela de frequências relativas
prop.table(table(mtcars$cyl))
table(mtcars$cyl)/length(mtcars$cyl)
# gráfico de barras
tb1 <- round(prop.table(table(mtcars$cyl)), 2)
barplot(tb1)
# gráfico de barras
tb1 <- round(prop.table(table(mtcars$cyl))*100, 2)
barplot(tb1, xlab = "Cilindradas")
barplot(tb1, xlab = "Cilindradas", ylim = c(0,45), col = c(2,3,4))
# gráfico de dispersão
plot(mtcars$cyl, mtcars$mpg)
# gráfico de dispersão
plot(mtcars$qsec, mtcars$mpg)
# gráfico de dispersão
plot(mtcars$disp, mtcars$mpg)
# gráfico de dispersão
plot(mtcars$hp, mtcars$mpg)
# gráfico de dispersão
plot(mtcars$drat, mtcars$mpg)
# gráfico de dispersão
plot(mtcars$wt, mtcars$mpg)
plot(mtcars$vs, mtcars$mpg)
plot(mtcars$am, mtcars$mpg)
plot(mtcars$gear, mtcars$mpg)
plot(mtcars$carb, mtcars$mpg)
# histograma
hist(mtcars$mpg)
# histograma
hist(mtcars$disp)
# histograma
hist(mtcars$drat)
stem(mtcars$drat)
#ogiva de galton
install.packages("agricolae",dep=T)
library(agricolae)
g1<-graph.freq(mtcars$drat,plot=FALSE)
points<-ogive.freq(g1,col="red",frame=FALSE,
ylab="Frequência relativa acumulada", main="ogive")
plot(points,type="b",pch=16,las=1,bty="l")
# amplitude dos dados
range(mtcars$mpg)
# variância
sd(mtcars$mpg)^2
var(mtcars$mpg)
# boxplot
boxplot(mtcars$cyl)
# boxplot
boxplot(as.factor(mtcars$cyl))
as.factor(mtcars$cyl)
View(mtcars)
View(imdb)
View(USArrests)
?boxplot
data("InsectSprays")
head(InsectSprays)
data("OrchardSprays")
head(OrchardSprays)
# para ler dados do tipo excel precisa de pacote
library(readxl)
xlsx::write.xlsx(x = OrchardSprays, file = "OrchardSprays.xlsx")
xlsx::write.xlsx(x = InsectSprays, file = "InsectSprays.xlsx")
write.table(x = InsectSprays, file = "InsectSprays.txt")
write.table(x = OrchardSprays, file = "OrchardSprays.txt")
insetos_xlsx <- read_xlsx(path = "C:/Users/Heloiza/Downloads/InsectSprays.xlsx", sheet = 1)
View(insetos_xlsx)
?OrchardSprays
sprays_xlsx <- read_xlsx(path = "OrchardSprays.xlsx")
# lendo dados do tipo csv na pasta do projeto
dados <- read.csv(file = "mtcars.csv")
# lendo dados do tipo csv na pasta do projeto
mtcars <- read.csv(file = "mtcars.csv")
# lendo diferentes tipos de data Frames da pasta de Dowload
insetos_txt <- read.table("C:/Users/Heloiza/Downloads/InsectSprays.txt", header = TRUE)
# lendo diferentes tipos de data Frames da pasta de Dowload
insetos <- read.table("C:/Users/Heloiza/Downloads/InsectSprays.txt", header = TRUE)
# lendo dados do tipo csv na pasta do projeto
mtcars <- read.csv(file = "mtcars.csv")
# lendo diferentes tipos de data Frames da pasta de Dowload
insetos <- read.table("C:/Users/Heloiza/Downloads/InsectSprays.txt", header = TRUE)
# para ler dados do tipo excel precisa de pacote
library(readxl)
insetos <- read_xlsx(path = "C:/Users/Heloiza/Downloads/InsectSprays.xlsx", sheet = 1)
sprays <- read_xlsx(path = "OrchardSprays.xlsx")
sprays <- read.table("C:/Users/Heloiza/Downloads/OrchardSprays.txt", header = TRUE)
View(sprays)
View(insetos)
# lendo dados do tipo txt
insetos <- read.table("C:/Users/Heloiza/Downloads/InsectSprays.txt", header = TRUE)
View(insetos)
# boxplot
boxplot(count ~ spray, data = insetos, col = "lightgray")
boxplot(decrease ~ treatment, data = sprays, col = "bisque",
log = "y")
boxplot(decrease ~ treatment, data = sprays, col = "bisque")
cor(mtcars$mpg, mtcars$cyl)
rm(list=ls())
dados=data.frame(renda, poup, nfilhos, estudo)
renda<-c(10,15,12,70,80,100,20,30,10,60)
poup<-c(4,7,5,20,20,30,8,8,3,15)
nfilhos<-c(8,6,5,1,2,2,3,2,6,1)
estudo<-c(3,5,5,12,16,18,8,8,4,8)
dados=data.frame(renda, poup, nfilhos, estudo)
rm(list=ls())
dados <- data.frame(renda=c(10,15,12,70,80,100,20,30,10,60),
nfilhos=c(8,6,5,1,2,2,3,2,6,1),
estudo=c(3,5,5,12,16,18,8,8,4,8))
# correlação entre o tempo de estudos e a quantidade de filhos
cor.test(estudo,nfilhos)
# correlação entre o tempo de estudos e a quantidade de filhos
cor.test(dados$estudo,dados$nfilhos)
dados2 <- data.frame(leite = c(26, 25, 31,29, 27, 31,32,28,30,30),
chuva = c(23,21,28,27,23,28,27,22,26,25))
#item b
mod <- lm(leite~chuva, data = dados2)
#item a
plot(dados2$chuva,dados2$leite,pch=19,col="blue", xlab="Precipita??o
pluviom?trica",ylab="Produ??o de Leite C")
#item b
mod <- lm(leite~chuva, data = dados2)
#item c
plot(dados2$chuva,dados2$leite,pch=19,col="blue", xlab="Precipita??o
pluviom?trica",ylab="Produ??o de Leite C")
#item c
plot(dados2$chuva,dados2$leite,pch=19,col="blue",
xlab="Precipitação pluviométrica",ylab="Produção de Leite")
#item c
plot(dados2$chuva,dados2$leite,pch=19,col="blue",
xlab="Precipitação pluviométrica",ylab="Produção de Leite")
#reta ajustada
abline(lm(leite~chuva, data = dados2),lwd=4,col="green")
#observem o res?duo
segments(dados2$chuva,fitted(mod),dados2$chuva,dados2$leite,lty=4,col="red")
#observem os valores ajustados
points(dados2$chuva,fitted(mod),col="red",pch=19)
#reta ajustada
abline(lm(leite~chuva, data = dados2),lwd=4,col="grey")
# gráfico de dispersão
plot(dados2$chuva,dados2$leite,pch=19,col="blue",
xlab="Precipitação pluviométrica",ylab="Produção de Leite")
#reta ajustada
abline(lm(leite~chuva, data = dados2),lwd=4,col="grey")
# valores ajustados
points(dados2$chuva,fitted(mod),col="red",pch=19)
summary(mod)
??dplyr
library(help = "dplyr")
corrplot::corrplot(dados)
View(dados)
matriz <- as.matrix(dados)
View(matriz)
corrplot::corrplot(matriz)
?corrplot
matriz <- cor(dados)
corrplot::corrplot(matriz)
View(matriz)
corrplot(corr = matriz, method = 'number')
# obtém o gráfico da matriz de correlação
library(corrplot)
corrplot(corr = matriz, method = 'number')
corrplot(corr = matriz, method = 'color')
corrplot(corr = matriz, method = 'color', type = 'lower')
corrplot(corr = matriz, method = 'color', type = 'upper')
corrplot(corr = matriz, method = 'color', type = 'upper', addCoef.col = "white")
# lendo dados do tipo excel -- precisa de pacote
library(readxl)
insetos <- read_xlsx(path = "C:/Users/Heloiza/Downloads/InsectSprays.xlsx", sheet = 1)
View(insetos)
sprays <- read.table("C:/Users/Heloiza/Downloads/OrchardSprays.txt", header = TRUE)
# quantidade de observações o n da amostra
length(mtcars$mpg)
nrow(mtcars)
# variância
var(mtcars$mpg)
sd(mtcars$mpg)^2
# tabela de frequências absolutas
table(mtcars$cyl)
# tabela de frequências relativas
prop.table(table(mtcars$cyl))
# gráfico de dispersão
plot(mtcars$wt, mtcars$mpg)
# 13° Gráficos com pacote ggplot2
library(ggplot2)
View(sprays)
names(sprays)
ggplot(data = sprays, mapping = aes(x = as.factor(treatment), y = decrease)) +
geom_col()
ggplot(data = sprays, mapping = aes(x = as.factor(treatment), y = decrease)) +
geom_col(mapping = aes(color = treatment))
ggplot(data = sprays, mapping = aes(x = as.factor(treatment), y = decrease)) +
geom_col(mapping = aes(fill = treatment))
?OrchardSprays
ggplot(data = sprays, mapping = aes(x = as.factor(treatment), y = decrease)) +
geom_col(mapping = aes(fill = treatment)) +
labs(x = "Tratamentos", y = "Diminuição do volume", fill = "Tratamentos") +
theme_minimal()
View(insetos)
View(dados)
View(dados2)
View(dados)
# gráfico de dispersão
ggplot(data = dados, mapping = aes(x = estudo, y = renda)) +
geom_point()
# gráfico de dispersão
ggplot(data = dados, mapping = aes(x = estudo, y = renda)) +
geom_point() +
geom_smooth()
# gráfico de dispersão
ggplot(data = dados, mapping = aes(x = estudo, y = renda)) +
geom_area()
# gráfico de dispersão
ggplot(data = dados, mapping = aes(x = estudo, y = renda)) +
geom_contour()
# gráfico de dispersão
ggplot(data = dados, mapping = aes(x = estudo, y = renda)) +
geom_density()
# gráfico de dispersão
ggplot(data = dados, mapping = aes(x = estudo, y = renda)) +
geom_polygon()
# gráfico de dispersão
ggplot(data = dados, mapping = aes(x = estudo, y = renda)) +
GeomBoxplot()
# gráfico de dispersão
ggplot(data = dados, mapping = aes(x = estudo, y = renda)) +
geom_point(aes(fill = nfilhos)) +
theme_minimal()
# gráfico de dispersão
ggplot(data = dados, mapping = aes(x = estudo, y = renda)) +
geom_point(aes(group = nfilhos)) +
theme_minimal()
# gráfico de dispersão
ggplot(data = dados, mapping = aes(x = estudo, y = renda)) +
geom_point() +
theme_minimal()
# gráfico de dispersão
ggplot(data = dados, mapping = aes(x = estudo, y = renda)) +
geom_point() +
geom_abline() +
theme_minimal()
?geom_abline
# gráfico de dispersão
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
geom_abline()
# gráfico de dispersão
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
geom_abline(intercept = 20)
# gráfico de dispersão
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
geom_abline(intercept = 37, slope = -5)
coef(lm(mpg ~ wt, data = mtcars))
# gráfico de alisamento
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# gráfico de alisamento
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm")
?geom_smooth
View(insetos)
# histograma
ggplot(data = insetos, mapping = aes(y = count)) +
geom_histogram()
# histograma
ggplot(data = insetos, mapping = aes(x = count)) +
geom_histogram()
View(dados2)
# histograma
ggplot(data = mtcars, mapping = aes(x = drat)) +
geom_histogram()
# histograma
hist(mtcars$drat)
?geom_histogram
# histograma
ggplot(diamonds, aes(carat)) +
geom_histogram()
ggplot(diamonds, aes(y = carat)) +
geom_histogram()
ggplot(diamonds, aes(carat)) +
geom_histogram(bins = 200)
ggplot(diamonds, aes(carat)) +
geom_bar() +
scale_x_binned()
ggplot(diamonds, aes(price, fill = cut)) +
geom_histogram(binwidth = 500
)
data("diamonds")
force(diamonds)
View(diamonds)
?diamonds
# histograma
ggplot(data = diamonds, mapping = aes(x = price, fill = cut)) +
geom_histogram()
# boxplot
ggplot(data = diamonds, mapping = aes(x = color, y = depth)) +
geom_boxplot()
# boxplot
ggplot(data = diamonds, mapping = aes(x = color, y = carat)) +
geom_boxplot()
ggplot(data = insetos, mapping = aes(x = spray, y = count)) +
geom_boxplot()
ggplot(data = insetos, mapping = aes(x = spray, y = count)) +
geom_boxplot() +
geom_violin()
# histograma
ggplot(data = diamonds, mapping = aes(x = price, fill = cut)) +
geom_histogram() +
theme_dark()
# histograma
ggplot(data = diamonds, mapping = aes(x = price, fill = cut)) +
geom_histogram() +
theme_linedraw()
View(diamonds)
# Modelo de Regressão Múltipla
mod1 <- lm(formula = price ~ carat + cut + depth + clarity, data = diamonds)
summary(mod1)
# Modelo de Regressão Múltipla
mod1 <- lm(formula = price ~ carat + as.factor(cut) + depth + clarity, data = diamonds)
summary(mod1)
typeof(diamonds$cut)
typeof(diamonds$clarity)
diamonds$cutf <- as.factor(diamonds$cut)
typeof(diamonds$cutf)
View(diamonds)
diamonds$cutf <- as.character(diamonds$cut)
View(diamonds)
# Modelo de Regressão Múltipla
mod1 <- lm(formula = price ~ carat + as.factor(cutf) + depth + clarity, data = diamonds)
summary(mod1)
diamonds$cutf <- as.factor(as.character(diamonds$cut))
diamonds$clarityf <- as.factor(as.character(diamonds$clarity))
# Modelo de Regressão Múltipla
mod1 <- lm(formula = price ~ carat + cutf + depth + clarityf, data = diamonds)
summary(mod1)
plot(mod1)
?datasets
library(help = "datasets")
# Regressão Múltipla
data("CO2")
View(CO2)
# Regressão Múltipla
data("ChickWeight")
View(ChickWeight)
?EuStockMarkets
?Loblolly
# Regressão Múltipla
data("Loblolly")
?Orange
data("Orange")
View(Loblolly)
View(Orange)
?PlantGrowth
?Titanic
?ToothGrowth
?airquality
?anscombe
?crimtab
crimtab
data(crimtab)
?esoph
?faithful
?lm
?freeny
?infert
?iris
?sleep
?women
?uspop
?trees
View(Orange)
View(CO2)
View(ChickWeight)
data("freeny")
force(freeny)
View(freeny)
library(ggplot2)
# Regressão Múltipla
data("Orange")
data("diamonds")
force(Orange)
View(Orange)
# carregamento do conjunto de dados
data("diamonds")
# transformando duas covariáveis em categóricas
diamonds$cutf <- as.factor(as.character(diamonds$cut))
diamonds$clarityf <- as.factor(as.character(diamonds$clarity))
View(diamonds)
names(diamonds)
# modelo de regressão múltipla de efeitos principais
mod1 <- lm(formula = price ~ carat + depth + cutf, data = diamonds)
summary(mod1)
# modelo de regressão múltipla com interações dupla
mod2 <- lm(formula = price ~ carat*depth + carat*cutf + depth*cutf, data = diamonds)
summary(mod2)
# modelo de regressão múltipla com interação tripla
mod3 <- lm(formula = price ~ carat*depth*cutf, data = diamonds)
summary(mod3)
data("mtcars")
force(mtcars)
View(mtcars)
?mtcars
mtcars2 <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("automatic", "manual"))
cyl  <- ordered(cyl)
gear <- ordered(gear)
carb <- ordered(carb)
})
summary(mtcars2)
View(mtcars2)
View(mtcars)
# carregando esse pacote para pegar o conjunto de dados diamonds
library(tidyverse)
mtcars <- mtcars |>
mutate(cylf = ordered(cyl),
gearf = ordered(gear),
carbf = ordered(carb))
names(mtcars)
# carregamento do conjunto de dados
data("diamonds")
data("mtcars")
# transformando covariáveis em categóricas
mtcars <- mtcars |>
mutate(cylf = ordered(cyl),
gearf = ordered(gear),
carbf = ordered(carb))
diamonds <- diamonds |>
mutate(cutf = as.factor(as.character(cut)),
clarityf = as.factor(as.character(clarity)))
# modelo de regressão múltipla de efeitos principais
fit1 <- lm(formula = price ~ carat + depth + cutf, data = diamonds)
summary(fit1)
mod1 <- lm(formula = mpg ~ hp + carbf + wt + cylf, data = mtcars)
summary(mod1)
?contrasts
# transformando covariáveis em categóricas
mtcars <- mtcars |>
mutate(cylf = as.factor(as.character(cyl)),
gearf = as.factor(as.character(gear)),
carbf = as.factor(as.character(carb)))
mod1 <- lm(formula = mpg ~ hp + carbf + wt + cylf, data = mtcars)
summary(mod1)
# modelo de regressão múltipla com interações dupla
mod2 <- lm(formula = mpg ~ hp*wt + hp*cylf + wt*cylf, data = mtcars)
summary(mod2)
# modelo de regressão múltipla com interação tripla
mod3 <- lm(formula = mpg ~ hp*wt*cylf, data = mtcars)
summary(mod3)
# Modelos não linear
?infert
?glm
model1 <- glm(case ~ spontaneous+induced, data = infert, family = binomial())
summary(model1)
model2 <- glm(case ~ age+parity+education+spontaneous+induced,
data = infert, family = binomial())
summary(model2)
data("CO2")
force(CO2)
View(CO2)
?CO2
coplot(uptake ~ conc | Plant, data = CO2, show.given = FALSE, type = "b")
fm1 <- nls(uptake ~ SSasymp(conc, Asym, lrc, c0),
data = CO2, subset = Plant == "Qn1")
summary(fm1)
?aov
?npk
View(CO2)
data("npk")
force(npk)
View(npk)
npk.aov1 <- aov(formula = yield ~ block + N*P*K, data = npk)
summary(npk.aov1)
options(contrasts = c("contr.sum", "contr.poly"))
npk.aov1 <- aov(formula = yield ~ block + N*P*K, data = npk)
summary(npk.aov1)
options(contrasts = c("contr.treatment", "contr.poly"))
npk.aov1 <- aov(yield ~ block + N + K, data = npk)
summary.lm(npk.aov1)
data("mtcars")
mtcars <- mtcars |>
mutate(cylf = ordered(cyl),
gearf = ordered(gear),
carbf = ordered(carb))
View(mtcars)
mod1 <- lm(formula = mpg ~ hp + carbf + wt + cylf, data = mtcars)
summary(mod1)
options(contrasts = c("contr.treatment", "contr.poly"))
mod1 <- lm(formula = mpg ~ hp + carbf + wt + cylf, data = mtcars)
summary(mod1)
?contrasts
options(contrasts = c("contr.treatment")
options(contrasts = c("contr.treatment"))
?options
options(contrasts = "contr.treatment")
options()
options(contrasts = c("unordered", "ordered"))
npk.aov1 <- aov(yield ~ block + N + K, data = npk)
options(contrasts = c("unordered", "ordered"))
npk.aov1 <- aov(formula = yield ~ block + N*P*K, data = npk)
summary(npk.aov1)
npk.aov1 <- aov(yield ~ block + N + K, data = npk)
